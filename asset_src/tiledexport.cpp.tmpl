#include "tiledexport.h"

const GPU_Rect TiledTiles::tileToTextureRect[] = {
	{},	//NONE
	{% for t in gids -%}
		{ {{t%tileset_cols}} * {{tilesize}}, {{t//tileset_cols}} * {{tilesize}}, {{tilesize}}, {{tilesize}} }, //={{gid_to_tileid[t]}}, {{ tilenames[t] }}, gid={{t}}
	{% endfor -%}
	{},	//SOLID_TRANSPARENT
};

const vec TiledMap::map_size = vec({{ width }}, {{ height }});

const uint8_t TiledMap::map[] = {
    {% for t in map -%}
		{%- if debug -%}
			{%- if t == 0 -%}{{ ' ' }}{%- else -%}{{ 'x' }}{% endif %} 
		{%- else -%}
			{{ t }},
		{%- endif -%}
	{%- if loop.index%width == 0 %}
	{% endif -%} 
    {%- endfor %}
};

const std::array<BoxBounds, {{screens|length}}> TiledMap::screens = {
	{%- for s in screens %}
	BoxBounds({{s[0]}}f,{{s[1]}}f,{{s[2]}}f,{{s[3]}}f),
	{%- endfor %}
};

{% for type, positions in entities_by_type -%}
	{%- if positions|length > 1 -%}
		const std::unordered_map<int, vec> TiledEntities::{{type}} = {
		{%- for pos in positions %}
			{ {{pos[0]}}, vec({{pos[1]}}f, {{pos[2]}}f) },
		{%- endfor %}
		};
	{% else -%}
		const vec TiledEntities::{{type}} = vec({{positions[0][1]}}f, {{positions[0][2]}}f);
	{% endif %}
{% endfor %}

{% for type, bounds_list in areas_by_type -%}
	const std::array<BoxBounds, {{bounds_list|length}}> TiledAreas::{{type}} = {
		{%- for b in bounds_list %}
		BoxBounds({{b[0]}}f,{{b[1]}}f,{{b[2]}}f,{{b[3]}}f),
		{%- endfor %}
	};
{% endfor %}

